options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # 0) Get GKE credentials and persist kubeconfig for later steps
  - id: get-credentials
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -ceu
      - |
        gcloud container clusters get-credentials vikunja-autopilot \
          --region europe-west4 \
          --project vikunja-case
        # persist kubeconfig for next steps
        mkdir -p /workspace/.kube
        cp -f /builder/home/.kube/config /workspace/.kube/config

  # 1) Create/label/annotate namespace so Helm can manage it
  - id: prepare-namespace
    name: gcr.io/cloud-builders/gcloud
    env:
      - KUBECONFIG=/workspace/.kube/config
    entrypoint: bash
    args:
      - -ceu
      - |
        kubectl get ns vikunja >/dev/null 2>&1 || kubectl create ns vikunja
        kubectl label ns vikunja app.kubernetes.io/managed-by=Helm --overwrite
        kubectl annotate ns vikunja \
          meta.helm.sh/release-name=vikunja \
          meta.helm.sh/release-namespace=vikunja --overwrite

  # 2) Create/Update secrets
  - id: create-secrets
    name: gcr.io/cloud-builders/gcloud
    env:
      - KUBECONFIG=/workspace/.kube/config
    entrypoint: bash
    args:
      - -ceu
      - |
        # DB password – key must be POSTGRES_PASSWORD to match values.yaml
        kubectl -n vikunja create secret generic vikunja-db-secret \
          --from-literal=POSTGRES_PASSWORD="$(gcloud secrets versions access latest --secret=vikunja-db-password)" \
          --dry-run=client -o yaml | kubectl apply -f -

        # App JWT secret – create once if missing
        if ! kubectl -n vikunja get secret vikunja-app-secret >/dev/null 2>&1; then
          kubectl -n vikunja create secret generic vikunja-app-secret \
            --from-literal=VIKUNJA_SERVICE_JWTSECRET="$(tr -dc A-Za-z0-9 </dev/urandom | head -c 48)"
        fi

  # 3) Download Helm (no registry pulls) and deploy the local chart at ./helm/vikunja
  - id: helm-deploy
    name: gcr.io/cloud-builders/gcloud
    env:
      - KUBECONFIG=/workspace/.kube/config
    entrypoint: bash
    args:
      - -ceu
      - |
        set -euo pipefail

        # Clean any leftovers, fetch helm
        rm -rf /workspace/linux-amd64 /workspace/helm /workspace/helm.tgz
        curl -fsSL "https://get.helm.sh/helm-v3.14.4-linux-amd64.tar.gz" -o /workspace/helm.tgz
        tar -xzf /workspace/helm.tgz -C /workspace
        mv /workspace/linux-amd64/helm /workspace/helm && chmod +x /workspace/helm
        /workspace/helm version

        # If a previous release is stuck pending, clean it once
        if /workspace/helm -n vikunja list -q | grep -qx 'vikunja'; then
          status="$(/workspace/helm -n vikunja status vikunja -o json 2>/dev/null | sed -n 's/.*"status":"\([^"]*\)".*/\1/p' || true)"
          if [ "${status}" = "pending-install" ] || [ "${status}" = "pending-upgrade" ] || [ "${status}" = "pending-rollback" ]; then
            /workspace/helm -n vikunja uninstall vikunja || true
          fi
        fi

        # Ensure the chart exists
        test -f "./helm/vikunja/Chart.yaml" || { echo "ERROR: Chart not found at ./helm/vikunja"; exit 1; }

        # Deploy/upgrade.
        # IMPORTANT: force image keys to strings to satisfy the chart templates.
        /workspace/helm upgrade --install vikunja ./helm/vikunja \
          --namespace vikunja --create-namespace \
          --set-string image.api="vikunja/api:latest" \
          --set-string image.frontend="vikunja/frontend:latest"
