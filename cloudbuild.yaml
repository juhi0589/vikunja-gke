#Running successfully Finally now
timeout: "1800s"
options:
  logging: CLOUD_LOGGING_ONLY

steps:
  - id: prepare-env
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail

        PROJECT_ID="$(gcloud config get-value project)"
        REGION="europe-west4"
        CLUSTER_NAME="vikunja-autopilot"
        TFSTATE_BUCKET="$${PROJECT_ID}-tfstate"
        TFSTATE_PREFIX="gke"

        echo "Checking bucket: gs://$${TFSTATE_BUCKET}"
        gsutil ls -b "gs://$${TFSTATE_BUCKET}" >/dev/null

        {
          echo "export PROJECT_ID=$${PROJECT_ID}"
          echo "export REGION=$${REGION}"
          echo "export CLUSTER_NAME=$${CLUSTER_NAME}"
          echo "export TFSTATE_BUCKET=$${TFSTATE_BUCKET}"
          echo "export TFSTATE_PREFIX=$${TFSTATE_PREFIX}"
        } > /workspace/env.sh
        chmod +x /workspace/env.sh
        echo "Wrote /workspace/env.sh"

  - id: terraform-apply
    name: hashicorp/terraform:1.9.6
    entrypoint: sh
    args:
      - -c
      - |
        set -euo pipefail
        . /workspace/env.sh

        test -d infra/terraform || { echo "ERROR: infra/terraform not found"; exit 1; }

        terraform -chdir=infra/terraform init \
          -input=false \
          -backend-config="bucket=$${TFSTATE_BUCKET}" \
          -backend-config="prefix=$${TFSTATE_PREFIX}"

        terraform -chdir=infra/terraform apply -auto-approve -input=false \
          -var="project_id=$${PROJECT_ID}" \
          -var="region=$${REGION}"

  - id: k8s-preflight
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        . /workspace/env.sh

        export KUBECONFIG=/workspace/kubeconfig

        echo "Getting cluster credentials..."
        gcloud container clusters get-credentials "$${CLUSTER_NAME}" --region "$${REGION}"

        echo "Ensure namespace exists and is Helm-adoptable..."
        kubectl get ns vikunja >/dev/null 2>&1 || kubectl create ns vikunja
        kubectl label ns vikunja app.kubernetes.io/managed-by=Helm --overwrite
        kubectl annotate ns vikunja meta.helm.sh/release-name=vikunja --overwrite
        kubectl annotate ns vikunja meta.helm.sh/release-namespace=vikunja --overwrite

        echo "Create/Update secrets..."
        DB_PASSWORD="$(gcloud secrets versions access latest --secret='vikunja-db-password')"
        APP_SECRET="$(head -c 32 /dev/urandom | od -An -tx1 | tr -d ' \n')"

        kubectl -n vikunja create secret generic vikunja-db-secret \
          --from-literal=POSTGRES_PASSWORD="$$DB_PASSWORD" \
          --dry-run=client -o yaml | kubectl apply -f -

        kubectl -n vikunja create secret generic vikunja-app-secret \
          --from-literal=JWT_SECRET="$$APP_SECRET" \
          --dry-run=client -o yaml | kubectl apply -f -

  - id: helm-deploy
    name: gcr.io/cloud-builders/helm
    env:
      - KUBECONFIG=/workspace/kubeconfig
    entrypoint: sh
    args:
      - -c
      - |
        set -euo pipefail

        test -d helm/vikunja || { echo "ERROR: helm/vikunja chart path not found"; exit 1; }

        helm version
        helm upgrade --install vikunja ./helm/vikunja \
          --namespace vikunja \
          --wait --timeout 10m
